"""
markdown.en = "set, one of the most *useful* types"
markdown.zh = "集合，最*有用*的类型之一"
"""
@builtin struct Set end

"""
markdown.zh = "使用 `set(f)` 相当于 \$\{x | f(x)\}\$"
"""
set(judge::Lambda) = get(s -> foralliff(e -> e∈s, e -> judge(e)), Set)

"""
plain.zh = "集合相等，是对外延公理的调整"
plain.en = "definition of equality, adjustion to Axiom of Extensionality"
"""
===(a::Set, b::Set) = @forall x iff(x∈a, x∈b)

@builtin function ∈(_, ::Set) end
@alias ∈ (in, isin, among, 属于, u2208)

broadcast(f::Lambda, s::Set) = set(x -> (@exists y∈s f(y)===x))

"""
markdown.zh = "`set(p, ext)` 是单参数功能的扩展，相当于 \$\{ext(x) | p(x)\}\$"
"""
set(p::Lambda, ext::Set) = broadcast(ext, set(p))
enumerate(data) = set(x -> x∈data)
enum(args...) = enumerate(args)

# const universe = set(x -> true)

"""
plain.zh = "空集公理"
"""
@axiom macro empty_set()
	existsval(set(x -> false))
end

const ∅ = set(x -> false)
@alias ∅ (emptyset, 空集)

@proof emptyset_existence begin
	E = @empty_set
	@autowrap E set(x -> false) ∅
end

"""
plain.zh = "配对公理"
"""
@axiom macro pair_set(a, b)
	@exists c∈Set (@forall d iff(d∈c, d===a || d===b))
end

union(a, b) = set(x -> x∈a || x∈b)
@alias union (∪, 并集)
intersect(a, b) = ;
"""
plain.zh = "并集公理"
"""
@axiom macro union_set()
	keepsexistence(method(union, Set, Set))
end

"""
plain.zh = "无限公理"
"""
@axiom inf_set() begin
	@exists N∈Set ∅∈N && (@forall x∈N union(x, enum(x))∈N)
end

∉(a, b) = !(a∈b)
@alias ∉ (notin, u2209)
∋(a, b) = b∈a
@alias ∋ (ni, u220b)
∌(a, b) = !(b∈a)
@alias ∌ (notni, u220c)

⊆(a, b) = @forall x∈a x∈b
@alias ⊆ (subseteq, subset, u2286)
⊂(a, b) = subset(a, b) && a!==b
@alias ⊂ (proper_subset, u2282, ⊊, subsetneq, u228a)
⊇(a, b) = subset(b, a)
@alias ⊇ (supseteq, supset, u2287)
⊃(a, b) = proper_subset(b, a)
@alias ⊃ (proper_supset, u2283, ⊋, supsetneq, u228b)

\(a::Set, b::Set) = Set(x -> in(x, a) && notin(x, b))
△(a::Set, b::Set) = union(a\b, b\a)
@alias △ symmetric_difference

==(a::Set, b::Set) = @forall x iff(x∈a, (@exists y∈b x==y))

struct BroadSet
	field
end
in(e, s::BroadSet) = in(e, s.field)
==(a::BroadSet, b::BroadSet) = a.field==b.field
