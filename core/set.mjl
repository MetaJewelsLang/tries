"""
markdown.zh = "集合，最*有用*的类型之一。"
"""
@builtin struct Set end

"""
markdown.zh = "使用 `set(f)` 相当于 \$\{x | f(x)\}\$"
"""
set(judge::Lambda) = get(s -> isa(s, Set) && foralliff(e -> e∈s, e -> judge(e)))

"""
plain.zh = "集合相等，是对外延公理的调整"
"""
==(a::Set, b::Set) = forall(x -> (x∈a => x∈b))

@builtin function ∈(_, ::Set) end
@alias ∈ (in, isin, among, 属于)
broadcast(f::Lambda, s::Set) = set() do x
	exists(y -> and(y∈s, f(y)==x))
end
"""
markdown.zh = "`set(p, ext)` 是单参数功能的扩展，相当于 \$\{ext(x) | p(x)\}\$"
"""
set(p::Lambda, ext::Set) = broadcast(ext, set(p))
enumerate(data) = set(x -> x∈data)
enum(args...) = enumerate(args)

"""
plain.zh = "空集公理"
"""
@axiom empty_set() begin
	existsval(set(x -> false))
end
const ∅ = set(x -> false)
@alias ∅ (emptyset, 空集)

"""
plain.zh = "配对公理"
"""
@axiom @forall pair_set(a, b) begin
	exists(c -> forall(d -> (d∈c => or(d==a, d==b))))
end

"""
plain.zh = "并集公理"
"""
@axiom @forall union_set(a, b) begin
	exists(c -> forall(d -> (d∈c => or(d∈a, d∈b))))
end

struct BroadSet
	field
end
in(e, s::BroadSet) = in(e, s.field)
