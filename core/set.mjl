"""
markdown.zh = "集合，最*有用*的类型之一。使用 `Set(f)` 相当于 \$\{x | f(x)\}\$"
"""
@builtin struct Set end

"""
plain.zh = "集合相等，是对外延公理的调整"
"""
===(a::Set, b::Set) = forall(x -> (x∈a => x∈b))

@builtin function ∈(_, ::Set) end
@alias ∈ (in, isin, among, 属于)
broadcast(f::Lambda, s::Set) = Set() do x
	exists(y -> and(y∈s, f(y)===x))
end
"""
markdown.zh = "`Set(p, ext)` 是内置功能的扩展，相当于 \$\{ext(x) | p(x)\}\$"
"""
Set(p::Lambda, ext::Set) = broadcast(ext, Set(p))
enumerate(data) = Set(x -> x∈data)
enum(args...) = enumerate(args)

@axiom def_set() begin
	forall() do f
		assign(Set(f)) do set
			@assert_exist set
			forall(x -> iff(x∈set, f(x)))
		end
	end
end

"""
plain.zh = "空集公理"
"""
@axiom empty_set() begin
	existsval(Set(x -> false))
end
const ∅ = Set(x -> false)
@alias ∅ (emptyset, 空集)

"""
plain.zh = "配对公理"
"""
@axiom @forall pair_set(a, b) begin
	exists(c -> forall(d -> (d∈c => or(d===a, d===b))))
end

"""
plain.zh = "并集公理"
"""
@axiom @forall union_set(a, b) begin
	exists(c -> forall(d -> (d∈c => or(d∈a, d∈b))))
end
