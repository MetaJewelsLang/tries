@builtin function forall(::Lambda) end
forallif(st::Lambda, then::Lambda) = forall(e -> st(e) => then(e))
@alias forallif (foreach,)
foralliff(a::Lambda, b::Lambda) = forall(e -> iff(a(e), b(e)))
forallin(s, f::Lambda) = forallif(e -> eâˆˆs, f)

macro forall(pre, expr)
    if isa(pre, Symbol)
        return :(forall($pre -> $expr))
    end
    @assert isa(pre, Expr)
    re = expr
    for i in reverse(args)
        if isa(i, Symbol)
            re = :(forall(i -> $re))
        else
            @assert isa(i, Expr)
            re = :(forall($(i.args[2]) -> $i => $re))
        end
    end
    return re
end

@builtin function exists(::Lambda) end
macro exists(args, expr)
    return :($args -> expr)
end

@builtin function get(::Lambda, ::Type) end
