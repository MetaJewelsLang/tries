module CommonAbstraction

has_closure_2(s, f) = forallin(s, x -> forallin(s, y -> f(x, y)∈s))
@alias has_closure_2 (二元函数封闭性,)

has_reflexity(s, f) = forallin(s, x -> f(x, x))
@alias has_reflexity (自反性,)

has_symmetry(s, f) = forallin(s, x -> forallin(s, y -> f(x, y)==f(y, x)))
@alias has_symmetry (对称性,)

has_transitivity(s, f) = @forall x,y,z∈s f(x, y) && f(y, z) => f(x, z)
@alias has_transitivity (传递性,)

has_associativity(s, f) = @forall x,y,z∈s f(f(x, y), z)==f(x, f(y, z))
@alias has_associativity (结合性,)

has_unit_left(s, f) = @exists e∈s @forall g∈s f(e, g)==g
@alias has_unit_left (左单位元,)

has_inverse_left(s, f) = @forall g∈s @exists inv∈s f(inv, g)==get_unit_left(s, f)

@proof set_eq_reflexity begin
end

is_magma(s, f) = has_closure_2(s, f)
@alias is_magma (原群,)

is_semi_group(s, f) = has_closure_2(s, f) && has_associativity(s, f)
@alias is_semi_group (半群,)

is_monoid(s, f) = has_closure_2(s, f) && has_associativity(s, f) && has_unit_left(s, f)
@alias is_monoid (幺半群,)

is_group(s, f) = has_closure_2(s, f) && has_associativity(s, f) && has_unit_left(s, f) && has_inverse_left(s, f)
@alias is_group (群,)
@buildtype Group(s, f) is_group

"""
plain.zh = "同时满足结合律和交换律，一般被叫做“加法”，单位元可以叫零元"
"""
is_abelian_group(s, f) = is_group(s, f) && has_symmetry(s, f)
@alias is_abelian_group (阿贝尔群, 交换群)

"""
plain.zh = "满足结合律而不满足交换律，一般被叫做“乘法”，单位元又叫幺元"
"""
is_non_abelian_group(s, f) = is_group(s, f) && !has_symmetry(s, f)
@alias is_non_abelian_group (非阿贝尔群,)

is_finite_group(s, f) = is_group(s, f) && is_finite(s)
is_infinite_group(s, f) = is_group(s, f) && is_infinite(s)
@alias is_finite_group (有限群,)
@alias is_infinite_group (无限群,)

is_sub_group(s, f, t) = is_group(s, f) && is_group(t, f) && subset(t, s)

end # CA
