module PeanoRules
"""
plain.zh = "初始值规则"
"""
initial_value_rule(s, zero) = zero∈s

"""
plain.zh = "后继规则"
"""
next_rule(s, _) = forallin(s, e -> next(e)∈s)

"""
plain.zh = "前继规则"
"""
prev_rule(s, zero) = forallin(s, e -> e!=zero => existsin(s, p -> next(p)==e))

"""
plain.zh = "唯一性规则"
"""
uniqueness_rule(s, _) = forall((x, y) -> ifthen(x∈s && y∈s && x!=y, next(x)!=next(y)))

end # PeanoRules

struct NaturalNumber{T<:Type}
    type::Type{T}
    function NaturalNumber{T<:Type}()
    end
end

    @rule (ofcat(自反性, ==, ty, ty) && ofcat(对称性, ==, ty, ty) && ofcat(传递性, ==, ty, ty)) # 相等规则
    @rule forall(p -> ifthen(
        p(zero) && forallof(ty, n -> ifthen()),
        forallof(ty, n -> call(p, n))
    )) # 归纳规则

const ℕ = CategorySet(NaturalNumber)
+(a::NaturalNumber, b::NaturalNumber) = iszero(b) ? a : next(a) + prev(b)
-(a::NaturalNumber, b::NaturalNumber) = iszero(b) ? a : iszero(a) ? ArgumentError("$a < $b") : prev(a) - prev(b)
<(a::NatutalNumber, b::NaturalNumber) = iszero(a) ? !iszero(b) : prev(a) < prev(b)

struct SetNaturalNumber
    set::Set
    function SetNaturalNumber(set::Set)
        if set in axiom_N
            return new(set)
        else
            throw(ArgumentError("set should be in $axiom_N"))
        end
    end
end
next(n::SetNaturalNumber) = SetNaturalNumber(union(n.set, enum(n.set)))

function prev(n::SetNaturalNumber)
    if n.set==∅
        throw(ArgumentError("$n has no previous element"))
    else
        return SetNaturalNumber(getexist(p -> union(p, enum(p))==n.set))
    end
end

zero(::Type{SetNaturalNumber}) = SetNaturalNumber(∅)
one(::Type{SetNaturalNumber}) = SetNaturalNumber(enum(∅))

let
    SNN = SetNaturalNumber
    R1 = @proof begin
        @ax_constructor isa(SNN(∅), SNN)
        @beta isa(zero(SNN), SNN) isa($, SNN)
        @ax_exists exists(zero -> isa(zero, SNN))
    end
    R2 = @proof begin
    end
end


#= @proof begin
    @β forall(x -> inℕ(x), inℕ(x)) inℕ
    forall(_else -> ifthenelse(x -> inℕ(x), constructor(SetNaturalNumber(x)), _else))
    @assert forall((x::Set) -> inℕ(x), x -> SetNaturalNumber(x) == ((@lower SetNaturalNumber)(x)))
    field_set_of_lower = @β (x::Set) (ty::DataType, nt::NamedTuple, sy::Symbol) -> (getfield((@lower ty)(nt...), sy) == getfield(nt, sy)) (SetNaturalNumber, (set = x,), :set)
    # fieldof_lower
    @assert forallifthen(x -> isa(x, SetNaturalNumber), x -> isℕ(x.set))
end =#
