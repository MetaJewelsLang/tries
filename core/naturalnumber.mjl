module PeanoRules
"""
plain.zh = "初始值规则"
"""
initial_value_rule(s, zero) = zero∈s

"""
plain.zh = "后继规则"
"""
next_rule(s, _) = forallin(s, e -> next(e)∈s)

"""
plain.zh = "前继规则"
"""
prev_rule(s, zero) = forallin(s, e -> e!=zero => existsin(s, p -> next(p)==e))

"""
plain.zh = "唯一性规则"
"""
uniqueness_rule(s, _) = forall((x, y) -> ifthen(x∈s && y∈s && x!=y, next(x)!=next(y)))

"""
plain.zh = "相等规则：具有自反性，对称性与传递性"
"""
equal_rule(s, _) = has_reflexity(==, s) && has_symmetry(==, s) && has_transitivity(==, s)

"""
plain.zh = "归纳规则"
"""
induction_rule(s, zero) = forallif(
    p -> p(zero) && forallin(s, e -> p(e) => p(next(e))),
    forallin(s, e -> p(e))
)

function peano_check(s, zero)
    initial_value_rule(s, zero) &&
    next_rule(s, zero) &&
    prev_rule(s, zero) &&
    uniqueness_rule(s, zero) &&
    equal_rule(s, zero) &&
    induction_rule(s, zero)
end

end # PeanoRules

struct NaturalNumber
    field
    function NaturalNumber(field)
        return PeanoRules.peano_check(field, zero) ? new(field) : void
    end
end

# const ℕ = BroadSet(NaturalNumber)
+(a::NaturalNumber, b::NaturalNumber) = iszero(b) ? a : next(a) + prev(b)
-(a::NaturalNumber, b::NaturalNumber) = iszero(b) ? a : iszero(a) ? void : prev(a) - prev(b)
<(a::NatutalNumber, b::NaturalNumber) = iszero(a) ? !iszero(b) : prev(a) < prev(b)

const naturalnumber_set = get() do s
    isa(s, Set) &&
    foralliff(e -> e∈s,
        e -> e===∅ ||
        existsin(s, p -> p∪enum(p)===e)
    )
end
struct SetNaturalNumber
    set::Set
    function SetNaturalNumber(set::Set)
        return set∈naturalnumber_set ? new(set) : void
    end
end
next(n::SetNaturalNumber) = SetNaturalNumber(union(n.set, enum(n.set)))
prev(n::SetNaturalNumber) = n.set===∅ ? void : get() do s
    isa(s, Set) &&
    union(p, enum(p))===n.set
end

@inline zero(::Type{SetNaturalNumber}) = SetNaturalNumber(∅)

let
    @inline SNN = SetNaturalNumber
    @inline ZERO = zero(SNN)
    using PeanoRules
    initial = @proof begin
        tyas = @ax_constructor ZERO # isa(ZERO, SNN)
        inas = @wrap in(_, ::Type) tyas # ZERO∈SNN
        @wrap initial_rule(_, _) inas
    end
end

#= @proof begin
    @β forall(x -> inℕ(x), inℕ(x)) inℕ
    forall(_else -> ifthenelse(x -> inℕ(x), constructor(SetNaturalNumber(x)), _else))
    @assert forall((x::Set) -> inℕ(x), x -> SetNaturalNumber(x) == ((@lower SetNaturalNumber)(x)))
    field_set_of_lower = @β (x::Set) (ty::DataType, nt::NamedTuple, sy::Symbol) -> (getfield((@lower ty)(nt...), sy) == getfield(nt, sy)) (SetNaturalNumber, (set = x,), :set)
    # fieldof_lower
    @assert forallifthen(x -> isa(x, SetNaturalNumber), x -> isℕ(x.set))
end =#
